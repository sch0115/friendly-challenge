rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'groups' collection
    match /groups/{groupId} {
      // Allow any authenticated user to create a group
      allow create: if request.auth != null &&
                      // Ensure required fields are present
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.visibility is string && (request.resource.data.visibility == 'public' || request.resource.data.visibility == 'private') &&
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.members is list && request.resource.data.members.size() == 1 &&
                      request.resource.data.members[0].uid == request.auth.uid &&
                      request.resource.data.members[0].role == 'creator' &&
                      request.resource.data.members[0].joinedAt == request.time;

      // Allow members to read group data
      allow read: if request.auth != null &&
                    exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)); // Simplified check using subcollection for members
                    // Alternatively, check the members array:
                    // resource.data.members.hasAny([request.auth.uid]); // This requires indexing the members array for UIDs

      // Allow creator or admins to update (example, refine as needed)
      allow update: if request.auth != null &&
                      (resource.data.createdBy == request.auth.uid ||
                       get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin']);

      // Allow creator or admins to delete (example, refine as needed)
      allow delete: if request.auth != null &&
                      (resource.data.createdBy == request.auth.uid ||
                       get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin']);

      // Subcollection for members (alternative to array, often better for querying/security)
      match /members/{userId} {
        allow read: if request.auth != null &&
                      exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
        // Allow creator/admins to add/remove members, allow users to leave
        allow write: if request.auth != null &&
                       (get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin'] ||
                        (request.auth.uid == userId && request.method == 'delete')); // User leaving
      }

      // Rules for the 'activities' subcollection within a group
      match /activities/{activityId} {
        // Allow any group member to read activities
        allow read: if request.auth != null &&
                      exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));

        // Allow creator or admins of the group to create, update, delete activities
        allow write: if request.auth != null &&
                       get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin'] &&
                       // Validate activity data on create/update
                       activityWriteValidation(request, resource);
      }
    }

    // Helper function for activity write validation
    function activityWriteValidation(request, resource) {
      let data = request.resource.data;
      return data.name is string && data.name.size() > 0 && data.name.size() <= 150 &&
             data.description is string && data.description.size() > 0 && data.description.size() <= 1000 &&
             data.pointValue is number && data.pointValue > 0 &&
             data.groupId == resource.data.groupId && // Ensure groupId matches the parent group
             (request.method == 'create' ? data.createdBy == request.auth.uid : true) && // Set creator on create
             (request.method == 'create' ? data.createdAt == request.time : true) &&
             (request.method == 'update' ? data.updatedAt == request.time : request.resource.data.keys().hasOnly(['name', 'description', 'pointValue', 'groupId', 'createdBy', 'createdAt', 'updatedAt'])); // Check allowed fields
    }

    // Rules for the top-level 'activityLogs' collection
    match /activityLogs/{logId} {
      // Allow create if user is authenticated, the log is for themselves,
      // and they are a member of the group specified in the log.
      allow create: if request.auth != null &&
                      request.resource.data.userId == request.auth.uid &&
                      exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)/members/$(request.auth.uid)) &&
                      activityLogWriteValidation(request, resource); // Add data validation

      // Allow read if the user is the one who created the log OR if they are a member of the group the log belongs to.
      allow read: if request.auth != null &&
                    (resource.data.userId == request.auth.uid ||
                     exists(/databases/$(database)/documents/groups/$(resource.data.groupId)/members/$(request.auth.uid)));

      // Generally, logs shouldn't be updated. Allow update only by the user for specific fields like 'notes'?
      allow update: if request.auth != null &&
                      request.auth.uid == resource.data.userId &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['notes', 'updatedAt']) && // Example: Only allow updating notes
                      request.resource.data.updatedAt == request.time;

      // Allow deletion only by the user who created it (or maybe group admins?)
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Helper function for activity log write validation (create)
    function activityLogWriteValidation(request, resource) {
       let data = request.resource.data;
       return data.userId == request.auth.uid &&
              data.groupId is string && data.groupId.size() > 0 &&
              data.activityId is string && data.activityId.size() > 0 &&
              data.activityName is string && data.activityName.size() > 0 && // Denormalized name
              data.timestamp == request.time &&
              data.points is number && data.points >= 0 && // Allow 0 points?
              (data.keys().has('notes') ? data.notes is string && data.notes.size() <= 500 : true) && // Optional notes validation
              request.resource.data.keys().hasOnly(['userId', 'groupId', 'activityId', 'activityName', 'timestamp', 'points', 'notes']); // Ensure only allowed fields
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}