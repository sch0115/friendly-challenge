rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'groups' collection
    match /groups/{groupId} {
      // Allow any authenticated user to create a group
      allow create: if request.auth != null &&
                      // Ensure required fields are present
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.visibility is string && (request.resource.data.visibility == 'public' || request.resource.data.visibility == 'private') &&
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.members is list && request.resource.data.members.size() == 1 &&
                      request.resource.data.members[0].uid == request.auth.uid &&
                      request.resource.data.members[0].role == 'creator' &&
                      request.resource.data.members[0].joinedAt == request.time;

      // Allow members to read group data
      allow read: if request.auth != null &&
                    exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)); // Simplified check using subcollection for members
                    // Alternatively, check the members array:
                    // resource.data.members.hasAny([request.auth.uid]); // This requires indexing the members array for UIDs

      // Allow creator or admins to update (example, refine as needed)
      allow update: if request.auth != null &&
                      (resource.data.createdBy == request.auth.uid ||
                       get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin']);

      // Allow creator or admins to delete (example, refine as needed)
      allow delete: if request.auth != null &&
                      (resource.data.createdBy == request.auth.uid ||
                       get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin']);

      // Subcollection for members (alternative to array, often better for querying/security)
      match /members/{userId} {
        allow read: if request.auth != null &&
                      exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
        // Allow creator/admins to add/remove members, allow users to leave
        allow write: if request.auth != null &&
                       (get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role in ['creator', 'admin'] ||
                        (request.auth.uid == userId && request.method == 'delete')); // User leaving
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}